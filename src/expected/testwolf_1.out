drop extension if exists cube cascade;
NOTICE:  extension "cube" does not exist, skipping
create extension cube with version '1.0';
drop extension if exists wolf cascade;
NOTICE:  extension "wolf" does not exist, skipping
create extension wolf with version '1.0';
RESET client_min_messages;
RESET log_error_verbosity;
SET client_min_messages = notice;
SET log_error_verbosity = terse;
/*  ywolf_dim(yorder[])   == array_length(yorder[],1) */
/* ywolf_get(yorder) == ARRAY[ord]::yorder[] 		select array[row('a','b')::yorder]; */
/* ywolf_get(yorder,yorder[]) == yorder || yorder[] */
SELECT ywolf_reduce( ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,0)::yorder
],
ARRAY[
ROW(1,'a',8,100,'q1',200,'q2',50,1)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,1)::yorder
]);
                        ywolf_reduce                         
-------------------------------------------------------------
 {"(1,a,2,100,q1,200,q2,50,0)","(3,b,4,100,q2,200,q1,49,0)"}
(1 row)

/*
result:
 {"(1,a,2,100,q1,200,q2,50,0)","(3,b,4,100,q2,200,q1,49,0)"}

*/
SELECT ywolf_cat( 
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ARRAY[
ROW(3,'b',4,100,'q2',200,'q1',50,1)::yorder
]);
                           ywolf_cat                           
---------------------------------------------------------------
 {"(1,a,2,100,q1,200,q2,50,50)","(3,b,4,100,q2,200,q1,50,50)"}
(1 row)

SELECT ywolf_to_lines( ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,0)::yorder
]);
       ywolf_to_lines       
----------------------------
 (1,a,2,100,q1,200,q2,50,0)
 (3,b,4,100,q2,200,q1,50,0)
(2 rows)

SELECT ywolf_qtts( ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',50,30)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,12)::yorder
]);
 ywolf_qtts 
------------
 {30,12,2}
(1 row)

SELECT ywolf_follow(8, 
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ARRAY[ROW(3,'b',4,100,'q2',200,'q1',50,0)::yorder
]);
 ywolf_follow 
--------------
 t
(1 row)

SELECT ywolf_follow(8, 
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ARRAY[ROW(3,'b',4,100,'q2',200,'q3',50,0)::yorder
]);
 ywolf_follow 
--------------
 t
(1 row)

SELECT ywolf_status( ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',50,0)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,0)::yorder
]);
 ywolf_status 
--------------
            3
(1 row)

--------------------------------------------------------------------------------
-- AGGREGATE ywolf_max(yflow) 
--------------------------------------------------------------------------------
SELECT ywolf_maxg(
 ARRAY[
ROW(1,'a',2,100,'q1',300,'q2',50,1)::yorder,
ROW(3,'b',4,100,'q2',300,'q1',50,1)::yorder
]
, ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',50,1)::yorder,
ROW(3,'b',4,100,'q2',200,'q1',50,1)::yorder
]);
                         ywolf_maxg                          
-------------------------------------------------------------
 {"(1,a,2,100,q1,300,q2,50,1)","(3,b,4,100,q2,300,q1,50,1)"}
(1 row)

/*
returns:
 ARRAY[
ROW(1,'a',2,100,'q1',300,'q2',50,1)::yorder,
ROW(3,'b',4,100,'q2',300,'q1',50,1)::yorder
]
*/
/* ywolf_to_json(_yorder)   array_to_json(yorder[]) */
--------------------------------------------------------------------------------
-- returns an empty set if the flow has some qtt ==0, and otherwise set of order[.].oid
SELECT ywolf_iterid( ARRAY[
ROW(1,'a',2,100,'q1',200,'q2',1,0)::yorder,
ROW(3,'a',4,100,'q1',200,'q2',1,0)::yorder
]);
 ywolf_iterid 
--------------
            2
            4
(2 rows)

/*
return 2,4
*/
 
